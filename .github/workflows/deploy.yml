name: Deploy Travel Desk Frontend

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/travel-desk-frontend

jobs:
  test:
    name: Test and Quality Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: travel-desk-frontend/package-lock.json

      - name: Install dependencies
        working-directory: travel-desk-frontend
        run: npm ci

      - name: Run linting
        working-directory: travel-desk-frontend
        run: npm run lint

      - name: Check code formatting
        working-directory: travel-desk-frontend
        run: npm run format:check

      - name: Run unit tests
        working-directory: travel-desk-frontend
        run: npm run test:run

      - name: Run accessibility tests
        working-directory: travel-desk-frontend
        run: npm run test:accessibility

      - name: Generate test coverage
        working-directory: travel-desk-frontend
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: travel-desk-frontend/coverage
          flags: frontend
          name: travel-desk-frontend

  e2e-test:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: travel-desk-frontend/package-lock.json

      - name: Install dependencies
        working-directory: travel-desk-frontend
        run: npm ci

      - name: Install Playwright browsers
        working-directory: travel-desk-frontend
        run: npm run test:e2e:install

      - name: Build application
        working-directory: travel-desk-frontend
        run: npm run build:staging

      - name: Run E2E tests
        working-directory: travel-desk-frontend
        run: npm run test:e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: travel-desk-frontend/playwright-report/
          retention-days: 30

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, e2e-test]
    if: github.event_name == 'push'

    strategy:
      matrix:
        environment: [staging, production]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: travel-desk-frontend/package-lock.json

      - name: Install dependencies
        working-directory: travel-desk-frontend
        run: npm ci

      - name: Build application
        working-directory: travel-desk-frontend
        run: npm run build:${{ matrix.environment }}

      - name: Analyze bundle size
        working-directory: travel-desk-frontend
        run: npm run analyze-bundle

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.environment }}
          path: travel-desk-frontend/dist/
          retention-days: 30

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: travel-desk-frontend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_MODE=${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, docker-build]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-staging
          path: travel-desk-frontend/dist

      - name: Deploy to staging
        working-directory: travel-desk-frontend
        run: |
          chmod +x scripts/deploy.sh
          ./scripts/deploy.sh staging
        env:
          DEPLOY_KEY: ${{ secrets.STAGING_DEPLOY_KEY }}

      - name: Run smoke tests
        run: |
          curl -f https://staging.traveldesk.com/health || exit 1
          echo "âœ… Staging deployment successful"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-production
          path: travel-desk-frontend/dist

      - name: Deploy to production
        working-directory: travel-desk-frontend
        run: |
          chmod +x scripts/deploy.sh
          ./scripts/deploy.sh production
        env:
          DEPLOY_KEY: ${{ secrets.PRODUCTION_DEPLOY_KEY }}

      - name: Run smoke tests
        run: |
          curl -f https://traveldesk.com/health || exit 1
          echo "âœ… Production deployment successful"

      - name: Notify deployment
        if: success()
        run: |
          echo "ðŸŽ‰ Production deployment completed successfully!"
          # Add notification logic here (Slack, email, etc.)

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.event_name == 'push'

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
