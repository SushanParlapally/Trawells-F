// This file contains tests for API services but the imports are not used in the test implementations
// The actual service implementations would be imported when the tests are properly implemented // Mock the apiClient vi.mock(_'../config', _() = > ({ apiClient: { get: vi.fn(), post: vi.fn(), put: vi.fn(), delete: vi.fn()}})); describe(_'Real API Services', _() = > { let mockApiClient: any; beforeEach(_async () = > { const configModule = await import('../config'); mockApiClient = configModule.apiClient; vi.clearAllMocks();}); describe(_'AuthApiService', _() = > { it(_'should call correct login endpoint', _async () = > { const mockResponse = { data: { user: { id: 1, email: 'test@example.com'}, token: 'jwt-token'}}; mockApiClient.post.mockResolvedValue(mockResponse); const credentials = { email: 'test@example.com', password: 'password'}; const result = await authApiService.login(credentials); expect(mockApiClient.post).toHaveBeenCalledWith('/Login', credentials); expect(result).toEqual(mockResponse.data);});}); describe(_'UserService', _() = > { it(_'should get all users from correct endpoint', _async () = > { const mockUsers = [{ id: 1, name: 'John Doe'}]; const mockResponse = { data: { data: mockUsers, success: true} }; mockApiClient.get.mockResolvedValue(mockResponse); const result = await userService.getAllUsers(); expect(mockApiClient.get).toHaveBeenCalledWith('/User/users', {}); expect(result).toEqual(mockUsers);}); it(_'should get managers from correct endpoint', _async () = > { const mockManagers = [{ id: 1, name: 'Manager One'}]; const mockResponse = { data: { data: mockManagers, success: true} }; mockApiClient.get.mockResolvedValue(mockResponse); const result = await userService.getManagers(); expect(mockApiClient.get).toHaveBeenCalledWith('/User/managers', {}); expect(result).toEqual(mockManagers);}); it(_'should create user with correct endpoint', _async () = > { const userData = { name: 'New User', email: 'new@example.com'}; const mockResponse = { data: { data: { id: 1, ...userData}, success: true}}; mockApiClient.post.mockResolvedValue(mockResponse); const result = await userService.createUser(userData); expect(mockApiClient.post).toHaveBeenCalledWith('/User/users', userData, undefined); expect(result).toEqual({ id: 1, ...userData});}); it(_'should update user with correct endpoint', _async () = > { const userData = { name: 'Updated User'}; const mockResponse = { data: { data: { id: 1, ...userData}, success: true}}; mockApiClient.put.mockResolvedValue(mockResponse); const result = await userService.updateUser(1, userData); expect(mockApiClient.put).toHaveBeenCalledWith('/User/users/1', userData, undefined); expect(result).toEqual({ id: 1, ...userData});}); it(_'should delete user with correct endpoint', _async () = > { mockApiClient.delete.mockResolvedValue({ data: { success: true} }); await userService.deleteUser(3); expect(mockApiClient.delete).toHaveBeenCalledWith('/User/users/3', undefined);});}); describe(_'DepartmentService', _() = > { it(_'should get all departments from correct endpoint', _async () = > { const mockDepartments = [{ id: 1, name: 'IT Department'}]; const mockResponse = { data: { data: mockDepartments, success: true} }; mockApiClient.get.mockResolvedValue(mockResponse); const result = await departmentService.getAllDepartments(); expect(mockApiClient.get).toHaveBeenCalledWith('/Department', {}); expect(result).toEqual(mockDepartments);});}); describe(_'ProjectService', _() = > { it(_'should get all projects from correct endpoint', _async () = > { const mockProjects = [{ id: 1, name: 'Project Alpha'}]; const mockResponse = { data: { data: mockProjects, success: true} }; mockApiClient.get.mockResolvedValue(mockResponse); const result = await projectService.getAllProjects(); expect(mockApiClient.get).toHaveBeenCalledWith('/Project', {}); expect(result).toEqual(mockProjects);}); it(_'should get project by ID from correct endpoint', _async () = > { const mockProject = { id: 1, name: 'Project Alpha'}; const mockResponse = { data: { data: mockProject, success: true} }; mockApiClient.get.mockResolvedValue(mockResponse); const result = await projectService.getProjectById(1); expect(mockApiClient.get).toHaveBeenCalledWith('/Project/1', undefined); expect(result).toEqual(mockProject);});}); describe(_'RoleService', _() = > { it(_'should get all roles from correct endpoint', _async () = > { const mockRoles = [{ id: 1, name: 'Admin'}]; const mockResponse = { data: { data: mockRoles, success: true} }; mockApiClient.get.mockResolvedValue(mockResponse); const result = await roleService.getAllRoles(); expect(mockApiClient.get).toHaveBeenCalledWith('/Role', {}); expect(result).toEqual(mockRoles);}); it(_'should get role by ID from correct endpoint', _async () = > { const mockRole = { id: 1, name: 'Admin'}; const mockResponse = { data: { data: mockRole, success: true} }; mockApiClient.get.mockResolvedValue(mockResponse); const result = await roleService.getRoleById(1); expect(mockApiClient.get).toHaveBeenCalledWith('/Role/1', undefined); expect(result).toEqual(mockRole);});}); describe(_'TravelRequestService', _() = > { it(_'should get all travel requests from correct endpoint', _async () = > { const mockRequests = [{ id: 1, destination: 'New York'}]; const mockResponse = { data: { data: mockRequests, success: true} }; mockApiClient.get.mockResolvedValue(mockResponse); const result = await travelRequestService.getAllTravelRequests(); expect(mockApiClient.get).toHaveBeenCalledWith('/TravelRequest', {}); expect(result).toEqual(mockRequests);}); it(_'should create travel request with correct endpoint', _async () = > { const requestData = { destination: 'London', purpose: 'Business'}; const mockResponse = { data: { data: { id: 1, ...requestData}, success: true}}; mockApiClient.post.mockResolvedValue(mockResponse); const result = await travelRequestService.createTravelRequest(requestData); expect(mockApiClient.post).toHaveBeenCalledWith('/TravelRequest', requestData, undefined); expect(result).toEqual({ id: 1, ...requestData});}); it(_'should get travel requests by user from correct endpoint', _async () = > { const mockRequests = [{ id: 1, userId: 1, destination: 'Paris'}]; const mockResponse = { data: { data: mockRequests, success: true} }; mockApiClient.get.mockResolvedValue(mockResponse); const result = await travelRequestService.getTravelRequestsByUser(1); expect(mockApiClient.get).toHaveBeenCalledWith('/TravelRequest/user/1', {} ); expect(result).toEqual(mockRequests);}); it(_'should book travel request with correct endpoint', _async () = > { const mockResponse = { data: { success: true, bookingId: 'ABC123'} }; mockApiClient.post.mockResolvedValue(mockResponse); const result = await travelRequestService.bookTravelRequest(1); expect(mockApiClient.post).toHaveBeenCalledWith('/travel-requests/1/book'); expect(result).toEqual({ success: true, bookingId: 'ABC123'});}); it(_'should get ticket PDF with correct endpoint', _async () = > { const mockBlob = new Blob(['PDF content'], { type: 'application/pdf'}); mockApiClient.get.mockResolvedValue({ data: mockBlob}); const result = await travelRequestService.getTicketPdf(1); expect(mockApiClient.get).toHaveBeenCalledWith('/travel-requests/1/ticket-pdf', { responseType: 'blob'} ); expect(result).toEqual(mockBlob);});}); describe(_'ManagerService', _() = > { it(_'should get manager requests from correct endpoint', _async () = > { const mockRequests = [{ id: 1, status: 'Pending'}]; mockApiClient.get.mockResolvedValue({ data: mockRequests}); const result = await managerService.getManagerRequests(1); expect(mockApiClient.get).toHaveBeenCalledWith('/Manager/1/Requests'); expect(result).toEqual(mockRequests);}); it(_'should approve request with correct endpoint', _async () = > { const approvalData = { comments: 'Approved for business travel'}; const mockResponse = { data: { success: true, status: 'Approved'} }; mockApiClient.put.mockResolvedValue(mockResponse); const result = await managerService.approveRequest(1, approvalData); expect(mockApiClient.put).toHaveBeenCalledWith('/Manager/ApproveRequest/1', approvalData); expect(result).toEqual({ success: true, status: 'Approved'});}); it(_'should reject request with correct endpoint', _async () = > { const rejectionData = { reason: 'Budget constraints'}; const mockResponse = { data: { success: true, status: 'Rejected'} }; mockApiClient.put.mockResolvedValue(mockResponse); const result = await managerService.rejectRequest(1, rejectionData); expect(mockApiClient.put).toHaveBeenCalledWith('/Manager/RejectRequest/1', rejectionData); expect(result).toEqual({ success: true, status: 'Rejected'});});});});
